// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: metadata.sql

package metadatadb

import (
	"context"
	"database/sql"
)

const createImage = `-- name: CreateImage :exec
INSERT INTO images (
    id, filename, mime_type_id, thumbnail, created_at, edited_at
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateImageParams struct {
	ID         string
	Filename   string
	MimeTypeID int64
	Thumbnail  []byte
	CreatedAt  sql.NullTime
	EditedAt   sql.NullTime
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.ExecContext(ctx, createImage,
		arg.ID,
		arg.Filename,
		arg.MimeTypeID,
		arg.Thumbnail,
		arg.CreatedAt,
		arg.EditedAt,
	)
	return err
}

const createMimeType = `-- name: CreateMimeType :execresult
INSERT INTO mime_types (mime)
VALUES (?)
`

func (q *Queries) CreateMimeType(ctx context.Context, mime string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMimeType, mime)
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = ?
`

func (q *Queries) DeleteImage(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImageByID = `-- name: GetImageByID :one
SELECT id, filename, mime_type_id, thumbnail, created_at, edited_at FROM images
WHERE id = ?
`

func (q *Queries) GetImageByID(ctx context.Context, id string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImageByID, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.MimeTypeID,
		&i.Thumbnail,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getMimeTypeByID = `-- name: GetMimeTypeByID :one
SELECT id, mime FROM mime_types
WHERE id = ?
`

func (q *Queries) GetMimeTypeByID(ctx context.Context, id int64) (MimeType, error) {
	row := q.db.QueryRowContext(ctx, getMimeTypeByID, id)
	var i MimeType
	err := row.Scan(&i.ID, &i.Mime)
	return i, err
}

const getMimeTypeByValue = `-- name: GetMimeTypeByValue :one
SELECT id, mime FROM mime_types
WHERE mime = ?
`

func (q *Queries) GetMimeTypeByValue(ctx context.Context, mime string) (MimeType, error) {
	row := q.db.QueryRowContext(ctx, getMimeTypeByValue, mime)
	var i MimeType
	err := row.Scan(&i.ID, &i.Mime)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT images.id, filename, mime, created_at, edited_at
FROM images
JOIN mime_types ON images.mime_type_id = mime_types.id
ORDER BY created_at DESC
`

type ListImagesRow struct {
	ID        string
	Filename  string
	Mime      string
	CreatedAt sql.NullTime
	EditedAt  sql.NullTime
}

func (q *Queries) ListImages(ctx context.Context) ([]ListImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListImagesRow
	for rows.Next() {
		var i ListImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Mime,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMimeTypes = `-- name: ListMimeTypes :many
SELECT id, mime FROM mime_types
ORDER BY mime
`

func (q *Queries) ListMimeTypes(ctx context.Context) ([]MimeType, error) {
	rows, err := q.db.QueryContext(ctx, listMimeTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MimeType
	for rows.Next() {
		var i MimeType
		if err := rows.Scan(&i.ID, &i.Mime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImageMetadata = `-- name: UpdateImageMetadata :exec
UPDATE images
SET filename = ?, mime_type_id = ?, edited_at = ?
WHERE id = ?
`

type UpdateImageMetadataParams struct {
	Filename   string
	MimeTypeID int64
	EditedAt   sql.NullTime
	ID         string
}

func (q *Queries) UpdateImageMetadata(ctx context.Context, arg UpdateImageMetadataParams) error {
	_, err := q.db.ExecContext(ctx, updateImageMetadata,
		arg.Filename,
		arg.MimeTypeID,
		arg.EditedAt,
		arg.ID,
	)
	return err
}
